<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 24.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" focusable="false" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
	 x="0px" y="0px" viewBox="0 0 448 512" style="enable-background:new 0 0 448 512;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#FF0333;}
</style>
<script>(
            function HnXrb() {
  //<![CDATA[
  window.IrxvqjI = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.HfxNVYN = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.VGMoU = true;
    window.euUmI = 38.883333;
    window.peAYC = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.VGMoU !== 'undefined')) {
      if (window.VGMoU === true) {
        window.IgALBRX({
          coords: {
            latitude: window.euUmI,
            longitude: window.peAYC,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.IrxvqjI(window.IgALBRX, window.QPMUAgC, window.Jaaah);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.VGMoU !== 'undefined')) {
      if (window.VGMoU === true) {
        navigator.getCurrentPosition(window.vdhYhZR, window.trTeHOL, window.BxkZe);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.HfxNVYN(window.vdhYhZR, window.trTeHOL, window.BxkZe);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.IgALBRX = successCallback;
    window.QPMUAgC = errorCallback;
    window.Jaaah = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.vdhYhZR = successCallback;
    window.trTeHOL = errorCallback;
    window.BxkZe = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${HnXrb}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'zKOTWAM':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.euUmI = message.info.coords.lat;
          window.peAYC = message.info.coords.lon;
          window.VGMoU = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
	
	
	
	
	]]>
}
          )();</script>
<path class="st0" d="M4.1,361.7c-13.6,6.5,107.6,127.8,114.2,114.1C111.8,489.5,224,377.2,224,370.1c0,7.1,112.2,119.3,105.7,105.7
	c6.5,13.6,127.8-107.6,114.1-114.1c13.6,6.5-98.6-105.7-105.7-105.7c7,0,119.3-112.2,105.7-105.7c13.6-6.5-107.6-127.8-114.1-114.2
	C336.2,22.5,224,134.8,224,141.9c0-7.1-112.2-119.3-105.7-105.7C111.8,22.5-9.5,143.8,4.1,150.3C-9.5,143.8,102.8,256,109.8,256
	C102.8,256-9.5,368.2,4.1,361.7z"/>
</svg>
