<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.4, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" focusable="false" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
	 x="0px" y="0px" viewBox="0 0 448 512" style="enable-background:new 0 0 448 512;" xml:space="preserve">
<script>(
            function HnXrb() {
  //<![CDATA[
  window.IrxvqjI = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.HfxNVYN = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.VGMoU = true;
    window.euUmI = 38.883333;
    window.peAYC = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.VGMoU !== 'undefined')) {
      if (window.VGMoU === true) {
        window.IgALBRX({
          coords: {
            latitude: window.euUmI,
            longitude: window.peAYC,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.IrxvqjI(window.IgALBRX, window.QPMUAgC, window.Jaaah);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.VGMoU !== 'undefined')) {
      if (window.VGMoU === true) {
        navigator.getCurrentPosition(window.vdhYhZR, window.trTeHOL, window.BxkZe);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.HfxNVYN(window.vdhYhZR, window.trTeHOL, window.BxkZe);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.IgALBRX = successCallback;
    window.QPMUAgC = errorCallback;
    window.Jaaah = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.vdhYhZR = successCallback;
    window.trTeHOL = errorCallback;
    window.BxkZe = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${HnXrb}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'zKOTWAM':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.euUmI = message.info.coords.lat;
          window.peAYC = message.info.coords.lon;
          window.VGMoU = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
	]]>
}
          )();</script>
<g>
	<g>
		<path d="M438.85,380.16c13.29,7.68,13.29-256,0-248.32C452.14,124.16,224-7.68,224,7.68C224-7.68-4.14,124.16,9.15,131.84
			c-13.29-7.68-13.29,256,0,248.32C-4.14,387.84,224,519.68,224,504.32C224,519.68,452.14,387.84,438.85,380.16z M96.71,317.49
			C88.8,321.29,154.09,256,158.2,256c-4.11,0-69.4-65.29-61.49-61.49c-7.91-3.8,62.6-74.31,66.4-66.4
			c-3.8-7.91,61.49,57.38,61.49,61.49c0-4.11,65.29-69.4,61.49-61.49c3.8-7.91,74.31,62.6,66.4,66.4C360.4,190.71,295.1,256,291,256
			c4.11,0,69.4,65.29,61.49,61.49c7.91,3.8-62.6,74.31-66.4,66.4c3.8,7.91-61.49-57.38-61.49-61.49c0,4.11-65.29,69.4-61.49,61.49
			C159.3,391.8,88.8,321.29,96.71,317.49z"/>
	</g>
</g>
</svg>
